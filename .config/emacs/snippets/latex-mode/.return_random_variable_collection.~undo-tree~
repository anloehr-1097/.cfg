(undo-tree-save-format-version . 1)
"83b4e0c4a02fd187ae481d15952035f008bdb2b7"
[nil nil nil nil (26208 20028 198213 0) 0 nil]
([nil nil ((apply yas--snippet-revive 1 47 #s(yas--snippet nil (#s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #8) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #7 #s(yas--exit 47 nil) nil))) #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) #s(yas--exit 47 nil) 0 nil #s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #7) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #8) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #7 #s(yas--exit 47 nil) nil))) #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) #s(yas--exit 47 nil) 0 nil #s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #7) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) nil nil)) (1 . 47)) nil (26208 20028 198211 0) 0 nil])
([nil nil ((55 . 66) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -55) (undo-tree-id52 . -1) 56 (39 . 56) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -39) (undo-tree-id53 . -1) 40 (35 . 40) (#("u" 0 1 (face font-lock-comment-face fontified t)) . -35) (undo-tree-id54 . -1) 36 (35 . 36) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -35) (undo-tree-id55 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -36) (undo-tree-id56 . -1) (#("u" 0 1 (face font-lock-comment-face fontified t)) . -37) (undo-tree-id57 . -1) (#("r" 0 1 (face font-lock-comment-face fontified t)) . -38) (undo-tree-id58 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -39) (undo-tree-id59 . -1) 40 (33 . 40)) nil (26208 20028 198209 0) 0 nil])
([nil nil ((66 . 67) 65) nil (26208 20028 198197 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 67) (undo-tree-id51 . 1)) nil (26208 20028 198196 0) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -81) (undo-tree-id43 . -1) 82 (77 . 82) (#("r" 0 1 (face font-lock-comment-face fontified t)) . -77) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("u" 0 1 (face font-lock-comment-face fontified t)) . -78) (undo-tree-id46 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -79) (undo-tree-id47 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -80) (undo-tree-id48 . -1) 81 (75 . 81) (#("r" 0 1 (face font-lock-comment-face fontified t)) . -75) (undo-tree-id49 . -1) (#("v" 0 1 (face font-lock-comment-face fontified t)) . -76) (undo-tree-id50 . -1) 77 (74 . 77)) nil (26208 20028 198193 0) 0 nil])
([nil nil ((81 . 82) 80) nil (26208 20028 198169 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 82) (undo-tree-id42 . 1)) nil (26208 20028 198168 0) 0 nil])
([nil nil ((88 . 91) (87 . 88) 87) nil (26208 20028 198166 0) 0 nil])
([nil nil ((96 . 108) (#("|" 0 1 (fontified t)) . -96) (undo-tree-id31 . -1) 97 (96 . 97) (#("|" 0 1 (fontified t)) . -96) (undo-tree-id32 . -1) (#(" " 0 1 (fontified t)) . -97) (undo-tree-id33 . -1) (#("m" 0 1 (fontified t)) . -98) (undo-tree-id34 . -1) (#("i" 0 1 (fontified t)) . -99) (undo-tree-id35 . -1) (#("d" 0 1 (fontified t)) . -100) (undo-tree-id36 . -1) (#(" " 0 1 (fontified t)) . -101) (undo-tree-id37 . -1) 102 (95 . 102) (#(" " 0 1 (fontified t)) . -95) (undo-tree-id38 . -1) 96 (93 . 96) (#("i" 0 1 (fontified t)) . -93) (undo-tree-id39 . -1) (#("t" 0 1 (fontified t)) . -94) (undo-tree-id40 . -1) (#(" " 0 1 (fontified t)) . -95) (undo-tree-id41 . -1) 96 (90 . 96)) nil (26208 20028 198163 0) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -87) (undo-tree-id29 . -1) (#("A" 0 1 (fontified t)) . -88) (undo-tree-id30 . -1) 89 (87 . 89)) nil (26208 20028 198147 0) 0 nil])
([nil nil ((80 . 90) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -80) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("c" 0 1 (face font-lock-comment-face fontified t)) . -81) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -82) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -83) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -84) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -85) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("c" 0 1 (face font-lock-comment-face fontified t)) . -86) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -87) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -88) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -89) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -90) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 91 (80 . 91) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -80) (undo-tree-id28 . -1) 81) nil (26208 20028 198141 0) 0 nil])
([nil nil ((125 . 128) (#(" " 0 1 (fontified t)) . -125) (undo-tree-id5 . -1) 126 (118 . 126)) nil (26208 20028 198109 0) 0 nil])
([nil nil ((127 . 133)) nil (26208 20028 198107 0) 0 nil])
([nil nil ((134 . 137) (#("&" 0 1 (fontified t)) . -134) (undo-tree-id3 . -1) 135 (132 . 135) (#("l" 0 1 (fontified t)) . -132) (undo-tree-id4 . -1) 133 (132 . 133)) nil (26208 20028 198106 0) 0 nil])
([nil nil ((136 . 142)) nil (26208 20028 198101 0) 0 nil])
([nil nil ((117 . 120)) nil (26208 20028 198101 0) 0 nil])
([nil nil ((120 . 125) (#("o" 0 1 (fontified t)) . -120) (undo-tree-id1 . -1) (#("r" 0 1 (fontified t)) . -121) (undo-tree-id2 . -1) 122 (120 . 122) (119 . 120)) nil (26208 20028 198099 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 152)) nil (26208 20028 198093 0) 0 nil])
([nil nil ((158 . 168) (153 . 158)) nil (26208 20028 198092 0) 0 nil])
([nil nil ((167 . 168)) nil (26208 20028 198090 0) 0 nil])
([nil nil ((177 . 207) (169 . 177) (#(" " 0 1 (fontified t)) . -169) (undo-tree-id0 . -1) 170 (169 . 170)) nil (26208 20028 198086 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 111) (t 26208 20028 206264 876000)) nil (26208 20249 325783 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 111)) nil (26208 20249 325782 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 112)) nil (26208 20249 325780 0) 0 nil])
([nil current ((#(" " 0 1 (fontified t)) . 112)) nil (26208 20249 325775 0) 0 nil])
nil
