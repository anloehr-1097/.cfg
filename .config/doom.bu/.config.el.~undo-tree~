(undo-tree-save-format-version . 1)
"d65d5571aa2e934fc35c4d80ed919ca6f7081236"
[nil nil nil nil (25798 41154 474754 0) 0 nil]
([nil nil ((";" . 8548) (t 25798 40816 701641 255000)) nil (25798 41154 596999 0) 0 nil])
([nil nil ((" " . 8548)) nil (25798 41154 596998 0) 0 nil])
([nil nil ((";" . 8573)) nil (25798 41154 596997 0) 0 nil])
([nil nil ((" " . 8573)) nil (25798 41154 596996 0) 0 nil])
([nil nil ((";" . 8619)) nil (25798 41154 596995 0) 0 nil])
([nil nil ((" " . 8619)) nil (25798 41154 596994 0) 0 nil])
([nil nil ((";" . 8658) 8659) nil (25798 41154 596993 0) 0 nil])
([nil nil ((" " . 8657) 8658) nil (25798 41154 596992 0) 0 nil])
([nil nil ((";" . 8698)) nil (25798 41154 596991 0) 0 nil])
([nil nil ((" " . 8698)) nil (25798 41154 596990 0) 0 nil])
([nil nil ((8729 . 8730)) nil (25798 41154 596989 0) 0 nil])
([nil nil ((")" . 8729) (t 25798 40919 819438 236000)) nil (25798 41154 596988 0) 0 nil])
([nil nil (("(" . 8592)) nil (25798 41154 596987 0) 0 nil])
([nil nil ((")" . 8606)) nil (25798 41154 596986 0) 0 nil])
([nil nil ((")" . 8644)) nil (25798 41154 596985 0) 0 nil])
([nil nil (("(" . 8629)) nil (25798 41154 596984 0) 0 nil])
([nil nil (("(" . 8667)) nil (25798 41154 596983 0) 0 nil])
([nil nil ((")" . 8681)) nil (25798 41154 596982 0) 0 nil])
([nil nil ((")" . 8721)) nil (25798 41154 596981 0) 0 nil])
([nil nil (("(" . 8705)) nil (25798 41154 596980 0) 0 nil])
([nil nil ((8705 . 8706) (t 25798 40964 763294 599000)) nil (25798 41154 596979 0) 0 nil])
([nil nil ((#("d" 0 1 (fontified t ws-butler-chg chg)) . -8756) (undo-tree-id6 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg)) . -8757) (undo-tree-id7 . -1) 8758 (8756 . 8758) (#("        " 0 8 (fontified t ws-butler-chg chg)) . -8756) (undo-tree-id8 . -8) 8764 (#(" " 0 1 (fontified t ws-butler-chg chg)) . -8764) (undo-tree-id9 . -1) 8765 (8755 . 8765) (#(";" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-delimiter-face)) . -8755) (undo-tree-id10 . -1) (#("
" 0 1 (fontified t ws-butler-chg delete face font-lock-comment-face)) . -8756) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#(";" 0 1 (fontified nil ws-butler-chg chg face font-lock-comment-delimiter-face)) . -8757) (undo-tree-id15 . -1) 8758 (#("
" 0 1 (fontified nil ws-butler-chg chg face font-lock-comment-delimiter-face)) . 8758) (8757 . 8758) (8757 . 8758) (#(" " 0 1 (fontified nil ws-butler-chg chg face font-lock-comment-delimiter-face)) . 8756) (undo-tree-id16 . -1) (8757 . 8758) (#("
" 0 1 (fontified nil face font-lock-comment-face ws-butler-chg chg)) . 8757) (8755 . 8757) (8754 . 8756) 8725) nil (25798 41154 596975 0) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 8705) (undo-tree-id3 . 1) (undo-tree-id4 . -1) (undo-tree-id5 . -1)) nil (25798 41154 596958 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 8719) (undo-tree-id0 . 1) (undo-tree-id1 . -1) (undo-tree-id2 . -1)) nil (25798 41154 596953 0) 0 nil])
([nil nil ((8720 . 8721)) nil (25798 41154 596925 0) 0 nil])
([nil nil ((#("

" 0 1 (ws-butler-chg chg fontified t) 1 2 (ws-butler-chg delete fontified t)) . 8754) (8756 . 8756)) nil (25798 41154 596920 0) 0 nil])
([nil nil ((8767 . 8791) (#("dap" 0 3 (fontified t ws-butler-chg chg)) . -8767) (undo-tree-id68 . -3) 8770 (#("-" 0 1 (fontified t ws-butler-chg chg)) . -8770) (undo-tree-id69 . -1) 8771 (8767 . 8771) (#("dap" 0 3 (fontified t ws-butler-chg chg)) . -8767) (undo-tree-id70 . -3) 8770 (#("-" 0 1 (fontified t ws-butler-chg chg)) . -8770) (undo-tree-id71 . -1) 8771 (8767 . 8771) (#("dap" 0 3 (fontified t ws-butler-chg chg)) . -8767) (undo-tree-id72 . -3) 8770 (8766 . 8770) (8755 . 8766) (#("use-pac" 0 7 (fontified t ws-butler-chg chg)) . -8755) (undo-tree-id73 . -7) 8762 (8755 . 8762) (8754 . 8756) (#("(" 0 1 (fontified nil face font-lock-comment-face ws-butler-chg chg)) . -8754) (8754 . 8755) (t 25798 41154 625124 962000)) nil (25798 41191 170893 0) 0 nil])
([nil nil ((#("
(use-package dap--debug-configuration)" 0 1 (fontified t face font-lock-comment-face) 1 2 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-1-face)) 2 13 (fontified t ws-butler-chg chg face font-lock-keyword-face) 13 14 (fontified t ws-butler-chg chg) 14 38 (fontified t ws-butler-chg chg face font-lock-variable-name-face) 38 39 (fontified t ws-butler-chg delete face (rainbow-delimiters-depth-1-face))) . 8753) (undo-tree-id17 . -1) (undo-tree-id18 . -39) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . 1) (undo-tree-id25 . -1) (undo-tree-id26 . -38) (undo-tree-id27 . -1) (undo-tree-id28 . -39) (undo-tree-id29 . -37) (undo-tree-id30 . -37) (undo-tree-id31 . -37) (undo-tree-id32 . -37) (undo-tree-id33 . -37) (undo-tree-id34 . -37) (undo-tree-id35 . -37) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -37) (undo-tree-id39 . -37) (undo-tree-id40 . -37) (undo-tree-id41 . -37) (undo-tree-id42 . -37) (undo-tree-id43 . -37) (undo-tree-id44 . -1) (undo-tree-id45 . -37) (undo-tree-id46 . -37) (undo-tree-id47 . -37) (undo-tree-id48 . -37) (undo-tree-id49 . -37) (undo-tree-id50 . -37) (undo-tree-id51 . -37) (undo-tree-id52 . -37) (undo-tree-id53 . -37) (undo-tree-id54 . -37) (undo-tree-id55 . -37) (undo-tree-id56 . -37) (undo-tree-id57 . -37) (undo-tree-id58 . -37) (undo-tree-id59 . -37) (undo-tree-id60 . -37) (undo-tree-id61 . -37) (undo-tree-id62 . -37) (undo-tree-id63 . -37) (undo-tree-id64 . -37) (undo-tree-id65 . -37) (undo-tree-id66 . -37) (undo-tree-id67 . -39) 8790) nil (25798 41191 170873 0) 0 nil])
([nil nil ((8753 . 8754)) nil (25798 41191 170798 0) 0 nil])
([nil nil ((#("

; (add-hook 'pdf-view-mode-hook )
;
;
; ; Indentation
; (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
; (add-hook 'org-mode-hook 'highlight-indent-guides-mode)
; (add-hook 'text-mode-hook 'highlight-indent-guides-mode)
; (add-hook 'lisp-mode-hook 'highlight-indent-guides-mode)
; (setq highlight-indent-guides-method 'column)
;
;
; undo tree
(use-package undo-tree
  :hook (prog-mode . undo-tree-mode)
         (org-mode . undo-tree-mode)
         (text-mode . undo-tree-mode)
         (lisp-mode . undo-tree-mode))
;
; (undo-tree-visualizer-diff)
" 0 2 (fontified t) 2 4 (fontified t face font-lock-comment-delimiter-face) 4 36 (fontified t face font-lock-comment-face) 36 37 (fontified t face font-lock-comment-delimiter-face) 37 38 (fontified t face font-lock-comment-face) 38 39 (fontified t face font-lock-comment-delimiter-face) 39 40 (fontified t face font-lock-comment-face) 40 42 (fontified t face font-lock-comment-delimiter-face) 42 56 (fontified t face font-lock-comment-face) 56 58 (fontified t face font-lock-comment-delimiter-face) 58 66 (fontified t face font-lock-comment-face) 66 115 (fontified t face font-lock-comment-face) 115 117 (fontified t face font-lock-comment-delimiter-face) 117 173 (fontified t face font-lock-comment-face) 173 175 (fontified t face font-lock-comment-delimiter-face) 175 232 (fontified t face font-lock-comment-face) 232 234 (fontified t face font-lock-comment-delimiter-face) 234 291 (fontified t face font-lock-comment-face) 291 293 (fontified t face font-lock-comment-delimiter-face) 293 339 (fontified t face font-lock-comment-face) 339 340 (fontified t face font-lock-comment-delimiter-face) 340 341 (fontified t face font-lock-comment-face) 341 342 (fontified t face font-lock-comment-delimiter-face) 342 343 (fontified t face font-lock-comment-face) 343 345 (fontified t face font-lock-comment-delimiter-face) 345 355 (fontified t face font-lock-comment-face) 355 356 (fontified t face (rainbow-delimiters-depth-1-face)) 356 367 (fontified t face font-lock-keyword-face) 367 380 (fontified t) 380 385 (fontified t face font-lock-builtin-face) 385 386 (fontified t) 386 387 (fontified t face (rainbow-delimiters-depth-2-face)) 387 396 (fontified t face font-lock-function-name-face) 396 399 (fontified t) 399 413 (fontified t face font-lock-variable-name-face) 413 414 (fontified t face (rainbow-delimiters-depth-2-face)) 414 424 (fontified t) 424 425 (fontified t face (rainbow-delimiters-depth-2-face)) 425 433 (fontified t face font-lock-function-name-face) 433 436 (fontified t) 436 450 (fontified t face font-lock-variable-name-face) 450 451 (fontified t face (rainbow-delimiters-depth-2-face)) 451 461 (fontified t) 461 462 (fontified t face (rainbow-delimiters-depth-2-face)) 462 471 (fontified t face font-lock-function-name-face) 471 474 (fontified t) 474 488 (fontified t face font-lock-variable-name-face) 488 489 (fontified t face (rainbow-delimiters-depth-2-face)) 489 490 (fontified t) 490 499 (fontified t) 499 500 (fontified t face (rainbow-delimiters-depth-2-face)) 500 509 (fontified t face font-lock-function-name-face) 509 512 (fontified t) 512 513 (fontified t face font-lock-variable-name-face) 513 526 (fontified t face font-lock-variable-name-face) 526 527 (fontified t face (rainbow-delimiters-depth-2-face)) 527 528 (fontified t face (rainbow-delimiters-depth-1-face)) 528 529 (fontified t) 529 530 (fontified t face font-lock-comment-delimiter-face) 530 531 (fontified t face font-lock-comment-face) 531 533 (fontified t face font-lock-comment-delimiter-face) 533 560 (fontified t face font-lock-comment-face) 560 561 (fontified t face font-lock-comment-face)) . 8193) (undo-tree-id77 . -560) (undo-tree-id78 . -377) (undo-tree-id79 . -560) (undo-tree-id80 . -531) (undo-tree-id81 . -560) (undo-tree-id82 . -531) (undo-tree-id83 . -529) (undo-tree-id84 . -531) (undo-tree-id85 . -560) (undo-tree-id86 . -531) (undo-tree-id87 . -531) (undo-tree-id88 . -531) (undo-tree-id89 . -531) (undo-tree-id90 . -560) (undo-tree-id91 . -560) (undo-tree-id92 . -560) (undo-tree-id93 . -560) (undo-tree-id94 . -560) (undo-tree-id95 . -560) (undo-tree-id96 . -560) (undo-tree-id97 . -560) (undo-tree-id98 . -561) (undo-tree-id99 . -531) (undo-tree-id100 . -355) (undo-tree-id101 . -378) (undo-tree-id102 . -376) (undo-tree-id103 . -376) (undo-tree-id104 . -376) (undo-tree-id105 . -376) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -2) (undo-tree-id109 . -2) (undo-tree-id110 . -36) (undo-tree-id111 . -36) (undo-tree-id112 . -38) (undo-tree-id113 . -38) (undo-tree-id114 . -40) (undo-tree-id115 . -40) (undo-tree-id116 . -56) (undo-tree-id117 . -56) (undo-tree-id118 . -115) (undo-tree-id119 . -115) (undo-tree-id120 . -173) (undo-tree-id121 . -173) (undo-tree-id122 . -232) (undo-tree-id123 . -232) (undo-tree-id124 . -291) (undo-tree-id125 . -291) (undo-tree-id126 . -339) (undo-tree-id127 . -339) (undo-tree-id128 . -341) (undo-tree-id129 . -341) (undo-tree-id130 . -343) (undo-tree-id131 . -343) (undo-tree-id132 . -355) (undo-tree-id133 . -355) (undo-tree-id134 . -378) (undo-tree-id135 . -378) (undo-tree-id136 . -376) (undo-tree-id137 . -376) (undo-tree-id138 . -415) (undo-tree-id139 . -415) 8569 (t 25798 41191 199062 100000)) nil (25798 42344 252124 0) 0 nil])
([nil nil ((8195 . 8196) (#("
" 0 1 (fontified t ws-butler-chg chg)) . -8195) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) 8196 (8194 . 8196) (8193 . 8194) 8193) nil (25798 42344 252043 0) 0 nil])
([nil current ((nil rear-nonsticky nil 8297 . 8298) (nil fontified nil 8196 . 8298) (8196 . 8298) 8195) nil (25798 42344 252025 0) 0 nil])
nil
